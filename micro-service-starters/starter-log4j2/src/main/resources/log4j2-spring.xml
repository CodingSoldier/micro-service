<?xml version="1.0" encoding="UTF-8"?>
<!--
教程地址
https://www.docs4dev.com/docs/zh/log4j2/2.x/all/manual-index.html

https://juejin.cn/post/6870656918567567367
https://www.cnblogs.com/keeya/p/10101547.html

默认配置
org.springframework.boot.logging.log4j2.log4j2.xml
org.springframework.boot.logging.log4j2.log4j2-file.xml

log4j2.xml 比 application-log4j2.yaml 更早加载，需将日志配置文件名改为 log4j2-spring.xml

-->
<Configuration>
    <!-- 根节点Configuration中有两个常用的属性：status和monitorInterval
        status：是用于指定log4j的级别
        monitorterval：是用于指定log4j自动重新检测读取配置内容的间隔时间，单位为秒（s），最小值为5秒。-->
    <!--<Configuration status="INFO" monitorInterval="30"> -->

    <Properties>
        <Property name="LOG_EXCEPTION_CONVERSION_WORD">%xwEx</Property>
        <Property name="LOG_LEVEL_PATTERN">%5p</Property>
        <Property name="LOG_DATEFORMAT_PATTERN">yyyy-MM-dd HH:mm:ss.SSS</Property>
        <!-- 格式化输出-->
        <!-- [%X{traceId}/%X{spanId}] 支持输出 sleuth + zipkin 的 traceId、spanId -->
        <Property name="CONSOLE_LOG_PATTERN">%clr{%d{${sys:LOG_DATEFORMAT_PATTERN}}}{faint} %clr{${sys:LOG_LEVEL_PATTERN}} %clr{%pid}{magenta} %clr{---}{faint} [%X{traceId}/%X{spanId}] %clr{[%15.15t]}{faint} %clr{%-40.40c{1.}}{cyan} %clr{:}{faint} %m%n${sys:LOG_EXCEPTION_CONVERSION_WORD}
        </Property>
        <Property name="FILE_LOG_PATTERN">%d{${sys:LOG_DATEFORMAT_PATTERN}} ${sys:LOG_LEVEL_PATTERN} %pid --- [%X{traceId}/%X{spanId}] [%t] %-40.40c{1.} : %m%n${sys:LOG_EXCEPTION_CONVERSION_WORD}
        </Property>

        <!-- 定义日志存储的路径 -->
        <Property name="FILE_PATH">${spring:logging.file.path}</Property>
        <Property name="FILE_NAME">${spring:logging.file.name}</Property>

    </Properties>

    <!-- Appender按网络释义，有“输出目的地”之意 -->
    <Appenders>

        <!-- ConsoleAppender 将其输出写入控制台 -->
        <Console name="consoleAppender" target="SYSTEM_OUT" follow="true">
            <PatternLayout pattern="${sys:CONSOLE_LOG_PATTERN}"/>
            <!--控制台只输出level及其以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <!--            <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>-->
        </Console>

        <!--*********************文件日志***********************-->
        <!--  RollingFile节点用于实现日志文件更动更新的Appender，
        当满足条件（日志大小、指定时间等）重命名或打包原日志文件进行归档，生成新日志文件用于日志写入-->
        <!--debug级别日志-->
        <RollingFile name="debugRollingFile"
                     fileName="${FILE_PATH}/${FILE_NAME}.log"
                     filePattern="${FILE_PATH}/${FILE_NAME}/${FILE_NAME}-%d{yyyy-MM-dd}_%i.log.gz">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <!--            <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY"/>-->
            <PatternLayout pattern="${FILE_LOG_PATTERN}"/>
            <Policies>
                <!-- 应用重启时归档日志
                https://www.docs4dev.com/docs/zh/log4j2/2.x/all/manual-appenders.html -->
                <OnStartupTriggeringPolicy/>
                <!--interval属性用来指定多久滚动一次，默认是1 hour-->
                <TimeBasedTriggeringPolicy interval="12"/>
                <!--设置日志基础文件大小，超过该大小就触发日志文件滚动更新-->
                <SizeBasedTriggeringPolicy size="10MB"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
            <DefaultRolloverStrategy max="100"/>
        </RollingFile>

        <!--error级别日志-->
        <RollingFile name="errorRollingFile"
                     fileName="${FILE_PATH}/${FILE_NAME}-error.log"
                     filePattern="${FILE_PATH}/${FILE_NAME}/${FILE_NAME}-error-%d{yyyy-MM-dd}_%i.log.gz">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="ERROR" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${FILE_LOG_PATTERN}"/>
            <Policies>
                <!-- 应用重启时归档日志
                https://www.docs4dev.com/docs/zh/log4j2/2.x/all/manual-appenders.html -->
                <OnStartupTriggeringPolicy/>
                <!--interval属性用来指定多久滚动一次，默认是1 hour-->
                <TimeBasedTriggeringPolicy interval="24"/>
                <!--设置日志基础文件大小，超过该大小就触发日志文件滚动更新-->
                <SizeBasedTriggeringPolicy size="10MB"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
            <DefaultRolloverStrategy max="100"/>
        </RollingFile>

    </Appenders>

    <!--Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。-->
    <!--然后定义loggers，只有定义了logger并引入的appender，appender才会生效-->
    <loggers>
        <root level="info">
            <appender-ref ref="consoleAppender"/>
            <appender-ref ref="debugRollingFile"/>
            <appender-ref ref="errorRollingFile"/>
        </root>
    </loggers>

</Configuration>
